# name: Build All

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
env:
  GAME_NAME: nitrogame

  ITCH_USERNAME: nitroplum
  ITCH_GAME_ID: nitrogame-engine
  ITCH_WIN_CHANNEL: win
  ITCH_MAC_CHANNEL: mac
  ITCH_LINUX_CHANNEL: linux
  ITCH_WEB_CHANNEL: web

jobs:
  build-mac:
    name: Build for Mac OSX
    runs-on: macos-latest
    strategy:
      fail-fast: false
    
    steps:
    - name: Install SDL
      uses: libsdl-org/setup-sdl@main
      id: sdl
      with:
        install-linux-dependencies: false
        version: 3-head

    - uses: actions/checkout@v4
    - uses: buildalon/setup-butler@v1
      with:
        api-key: ${{ secrets.BUTLER_API_KEY }}

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=clang++
        -DCMAKE_C_COMPILER=clang
        -DCMAKE_BUILD_TYPE=Release
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release

    - name: Create DMG
      run: |
        mkdir ./upload/
        cp $SDL3_ROOT/lib/*.dylib ./upload/
        cp ${{ steps.strings.outputs.build-output-dir }}/app ./upload/
        cd ./upload/
        hdiutil create -srcfolder . -volname ${{env.GAME_NAME}} ${{env.GAME_NAME}}.dmg

    - name: Upload Artifact
      uses: actions/upload-artifact@v4.6.0
      with:
        name: mac-build
        path: ./upload/${{env.GAME_NAME}}.dmg
    
    - name: Upload to itch.io
      run: butler push ./upload/ ${{env.ITCH_USERNAME}}/${{env.ITCH_GAME_ID}}:${{env.ITCH_MAC_CHANNEL}}
      env:
        BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
    # - uses: KikimoraGames/itch-publish@v0.0.3
    #   with:
    #     gameData: ./upload/*
    #     butlerApiKey: ${{secrets.BUTLER_API_KEY}}
    #     itchUsername: ${{env.ITCH_USERNAME}}
    #     itchGameId: ${{env.ITCH_GAME_ID}}
    #     buildChannel: ${{env.ITCH_MAC_CHANNEL}}
    #     buildNumber: ${{needs.version.outputs.version_hash}}

  build-windows:
    name: Build for Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
    
    steps:
    - name: Install SDL
      uses: libsdl-org/setup-sdl@main
      id: sdl
      with:
        install-linux-dependencies: false
        version: 3-head

    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=clang++
        -DCMAKE_C_COMPILER=clang
        -DCMAKE_BUILD_TYPE=Release
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release

    - name: Create Upload
      run: |
        mkdir ./upload/
        cp $SDL3_ROOT/lib/*.dll ./upload/
        cp ${{ steps.strings.outputs.build-output-dir }}/app ./upload/

    - name: Upload Artifact
      uses: actions/upload-artifact@v4.6.0
      with:
        name: win-build
        path: ./upload/*

  build-linux:
    name: Build for Linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    
    steps:
    - name: Install SDL
      uses: libsdl-org/setup-sdl@main
      id: sdl
      with:
        install-linux-dependencies: false
        version: 3-head

    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=clang++
        -DCMAKE_C_COMPILER=clang
        -DCMAKE_BUILD_TYPE=Release
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release

    - name: Create Upload
      run: |
        mkdir ./upload/
        cp $SDL3_ROOT/lib/*.so ./upload/
        cp ${{ steps.strings.outputs.build-output-dir }}/app ./upload/

    - name: Upload Artifact
      uses: actions/upload-artifact@v4.6.0
      with:
        name: linux-build
        path: ./upload/*
